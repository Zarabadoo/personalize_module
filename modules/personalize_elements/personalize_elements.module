<?php

/**
 * @file personalize_elements.module
 * Provides an option set plugin for personalizing ALL THE THINGS.
 */

define('PERSONALIZE_ELEMENTS_CONTROL_OPTION_ID', 'control-variation');
define('PERSONALIZE_ELEMENTS_CONTROL_OPTION_LABEL', 'Control variation');
define('PERSONALIZE_ELEMENTS_HELP_URL_SELECTOR', 'https://docs.acquia.com/lift/personalize/element#selector');

/**
 * Implements hook_permission().
 */
function personalize_elements_permission() {
  $permissions = array(
    'use advanced personalize elements features' => array(
      'title' => t('Use advanced Personalize Elements features'),
      'description' => t('Includes permission to write JavaScript to be executed for content variations and modifying the set of allowed HTML tags.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Implements hook_page_build().
 */
function personalize_elements_page_build(&$page) {
  $option_sets = personalize_option_set_load_by_type('elements');
  $elements = array();
  foreach ($option_sets as $osid => $option_set) {
    $page_match = TRUE;
    if (isset($option_set->data['pages']) && !empty($option_set->data['pages'])) {
      $page_match = personalize_elements_match_page($option_set->data['pages']);
    }
    if (!$page_match) {
      unset($option_sets[$osid]);
      continue;
    }
    $js_id = $js_id = personalize_stringify_osid($option_set->osid);
    $elements[$js_id] = array(
      'selector' => $option_set->data['personalize_elements_selector'],
      'variation_type' => $option_set->data['personalize_elements_type'],
      // The 'runJS' variation type cannot be previewed in the normal way.
      'previewable' => $option_set->data['personalize_elements_type'] !== 'runJS',
    );
  }
  if (empty($elements)) {
    return;
  }
  $page['page_top']['personalize_elements'] = array(
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'personalize_elements') . '/css/personalize_elements.test_styles.css' => array(),
      ),
      'js' => array(
        drupal_get_path('module', 'personalize_elements') . '/js/personalize_elements.js' => array(),
        array(
          'data' => array(
            'personalize_elements' => array(
              'elements' => $elements,
              'controlOptionName' => PERSONALIZE_ELEMENTS_CONTROL_OPTION_ID,
            )
          ),
          'type' => 'setting'
        ),
      ),
    )
  );
  foreach ($option_sets as $option_set) {
    personalize_element_with_option_set($page['page_top']['personalize_elements'], $option_set);
  }
}

/**
 * Implements hook_personalize_element_load().
 */
function personalize_elements_personalize_option_set_load($option_sets) {
  foreach ($option_sets as $option_set) {
    if ($option_set->plugin == 'elements') {
      // Rendered Option Sets are usually in a div with an id of #personalize-osid-123
      // but for arbitrary elements on the page, the selector is just what was
      // specified when the Option Set was configured.
      $option_set->selector = $option_set->data['personalize_elements_selector'];
    }
  }
}

/**
 * Implements hook_personalize_create_new_links().
 */
function personalize_elements_personalize_create_new_links() {
  return array(
    array(
      'title' => 'Personalized Element',
      'path' => 'admin/structure/personalize-elements/add',
    ),
  );
}

/**
 * Implements hook_personalize_edit_link().
 */
function personalize_elements_personalize_edit_link($option_set) {
  if ($option_set->plugin != 'elements') {
    return '';
  }
  return "admin/structure/personalize-elements/manage/{$option_set->osid}/edit";
}

/**
 * Implements hook_personalize_delete_link().
 */
function personalize_elements_personalize_delete_link($option_set) {
  if ($option_set->plugin != 'elements') {
    return '';
  }
  return "admin/structure/personalize-elements/manage/{$option_set->osid}/delete";
}

/**
 * Implements hook_personalize_elements_variation_types().
 */
function personalize_elements_personalize_elements_variation_types($filter_by_perms = TRUE) {
  $types = array(
    'replaceHtml' => array(
      'label' => t('Replace the html'),
      'needs_selector' => TRUE,
    ),
    'addClass' => array(
      'label' => t('Add a class'),
      'needs_selector' => TRUE,
    ),
    'appendHtml' => array(
      'label' => t('Append HTML'),
      'needs_selector' => TRUE,
    ),
    'prependHtml' => array(
      'label' => t('Prepend HTML'),
      'needs_selector' => TRUE,
    ),
  );
  if (user_access('use advanced personalize elements features') || !$filter_by_perms) {
    $types['runJS'] = array(
      'label' => t('Run JavaScript code'),
      'needs_selector' => FALSE,
    );
  }
  return $types;
}

/**
 * Returns whether the supplied list of pages includes a match for
 * the current page.
 *
 * @param $pages
 *   String containing a set of pages separated by \n, \r or \r\n.
 * @return bool
 *   Returns TRUE if the current path is matched, FALSE otherwise.
 */
function personalize_elements_match_page($pages) {
  return TRUE;
}
